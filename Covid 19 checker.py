# -*- coding: utf-8 -*-
"""Copie de trained model de covid 19 test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P05QaGhEIqUAz-hjp5n58BjK-MXfDb2z
"""

import pandas as pd

# Load the raw data
raw_data = pd.read_csv('Raw-Data.csv')

# Explore the raw data
print("Raw Data:")
print(raw_data.head())

# Load the cleaned data
cleaned_data = pd.read_csv('Cleaned-Data.csv')

# Explore the cleaned data
print("\nCleaned Data:")
print(cleaned_data.head())

# Set maximum display options
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

# Load and display the raw data
raw_data = pd.read_csv('Raw-Data.csv')
raw_data

# Set maximum display options
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

# Load and display the cleaned data
cleaned_data = pd.read_csv('Cleaned-Data.csv')
cleaned_data

# Display the first 10 rows of cleaned data
cleaned_data.head(10)

cleaned_data.sample(10)  # Display a random sample of 10 rows

# Reset display options to default
pd.reset_option('display.max_rows')
pd.reset_option('display.max_columns')

severity_columns = ['Severity_Mild', 'Severity_Moderate', 'Severity_None', 'Severity_Severe']

for col in severity_columns:
    print(f"Unique values in {col}: {df[col].unique()}")

# Create a binary target variable indicating the presence of coronavirus
df['Presence_of_Covid'] = df[severity_columns].any(axis=1).astype(int)

# Now 'Presence_of_Covid' can be used as the target variable
target = df['Presence_of_Covid']

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Define features (X) and target variable (y)
features = df[['Fever', 'Tiredness', 'Dry-Cough', 'Difficulty-in-Breathing', 'Sore-Throat', 'None_Sympton',
                'Pains', 'Nasal-Congestion', 'Runny-Nose', 'Diarrhea', 'None_Experiencing',
                'Age_0-9', 'Age_10-19', 'Age_20-24', 'Age_25-59', 'Age_60+',
                'Gender_Female', 'Gender_Male', 'Gender_Transgender',
                'Severity_Mild', 'Severity_Moderate', 'Severity_None', 'Severity_Severe',
                'Contact_Dont-Know', 'Contact_No', 'Contact_Yes']]

target = df['Presence_of_Covid']

# Encode categorical variables
features_encoded = pd.get_dummies(features, drop_first=True)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features_encoded, target, test_size=0.2, random_state=42)

# Initialize and train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Display results
print(f'Accuracy: {accuracy}')
print(f'Classification Report:\n{report}')

from sklearn.metrics import confusion_matrix

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print(f'Confusion Matrix:\n{conf_matrix}')

# Print column names
print(df.columns)

# Create a binary target variable indicating the presence of coronavirus
df['Presence_of_Covid'] = df[['Severity_Mild', 'Severity_Moderate', 'Severity_Severe']].any(axis=1).astype(int)

# Now 'Presence_of_Covid' can be used as the target variable
target = df['Presence_of_Covid']

# Continue with the hyperparameter tuning code
# ... (hyperparameter tuning code)

# Print the DataFrame columns to verify the 'Presence_of_Covid' column
print(df.columns)

# Create a binary target variable indicating the presence of coronavirus
df['Presence_of_Covid'] = df[['Severity_Mild', 'Severity_Moderate', 'Severity_Severe']].any(axis=1).astype(int)

# Verify the 'Presence_of_Covid' column is created
print(df.columns)

# Continue with the hyperparameter tuning code
# ... (hyperparameter tuning code)

import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the data
df = pd.read_csv('Cleaned-Data.csv')

# Define features (X)
features = df[['Fever', 'Tiredness', 'Dry-Cough', 'Difficulty-in-Breathing', 'Sore-Throat', 'None_Sympton',
                'Pains', 'Nasal-Congestion', 'Runny-Nose', 'Diarrhea', 'None_Experiencing',
                'Age_0-9', 'Age_10-19', 'Age_20-24', 'Age_25-59', 'Age_60+',
                'Gender_Female', 'Gender_Male', 'Gender_Transgender',
                'Severity_Mild', 'Severity_Moderate', 'Severity_None', 'Severity_Severe',
                'Contact_Dont-Know', 'Contact_No', 'Contact_Yes']]

# Create the target variable 'Presence_of_Covid'
df['Presence_of_Covid'] = df[['Severity_Mild', 'Severity_Moderate', 'Severity_Severe']].any(axis=1).astype(int)

# Define the target variable (y)
target = df['Presence_of_Covid']

# Encode categorical variables
features_encoded = pd.get_dummies(features, drop_first=True)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features_encoded, target, test_size=0.2, random_state=42)

# Initialize the model
model = RandomForestClassifier(random_state=42)

# Define hyperparameters and their possible values
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Perform grid search
grid_search = GridSearchCV(model, param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

# Get the best hyperparameters
best_params = grid_search.best_params_

# Train the model with the best hyperparameters
best_model = RandomForestClassifier(**best_params, random_state=42)
best_model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = best_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

# Display results
print(f'Best Hyperparameters: {best_params}')
print(f'Accuracy with Best Model: {accuracy}')
print(f'Classification Report:\n{report}')

from joblib import dump

# Assuming `best_model` is your trained model
dump(best_model, 'random_forest_model.joblib')

from joblib import load
import pandas as pd

def make_predictions(input_data):
    # Load the trained model
    model = load('random_forest_model.joblib')

    # Preprocess the input data (similar to training data preprocessing)
    # ...

    # Make predictions
    predictions = model.predict(input_data)

    return predictions

from joblib import dump

# Assuming `best_model` is your trained scikit-learn model
dump(best_model, 'scikit-learn_model.joblib')